// Quest Core - 4-Layer Repository System
// Surface (Public) → Working (Selective) → Personal (Private) → Deep (System)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Entity Models
model Company {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  website       String?  @unique
  domain        String?
  industry      String?
  sizeRange     String?  @map("size_range")
  logoUrl       String?  @map("logo_url")
  description   String?
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  workExperiences     WorkExperience[]
  workingProjects     WorkingProject[]
  professionalContacts ProfessionalContact[]

  @@map("companies")
}

model Skill {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String   @unique
  category          String?
  subcategory       String?
  difficultyLevel   String?  @map("difficulty_level")
  marketDemandScore Int?     @map("market_demand_score")
  description       String?
  verified          Boolean  @default(false)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  userSkills UserSkill[]

  @@map("skills")
}

model EducationalInstitution {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  website   String?
  type      String?
  country   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  userEducation UserEducation[]

  @@map("educational_institutions")
}

model Certification {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  issuingOrganization String? @map("issuing_organization")
  website            String?
  category           String?
  validityPeriod     Int?     @map("validity_period")
  description        String?
  verified           Boolean  @default(false)
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  userCertifications UserCertification[]

  @@map("certifications")
}

// Enhanced Users Model
model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId   String   @unique @map("clerk_id")
  email     String   @unique
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Surface Repo
  surfaceProfile    SurfaceProfile?
  workExperiences   WorkExperience[]
  userSkills        UserSkill[]
  userEducation     UserEducation[]
  userCertifications UserCertification[]

  // Working Repo
  workingProfile     WorkingProfile?
  workingProjects    WorkingProject[]
  workingAchievements WorkingAchievement[]
  workingMedia       WorkingMedia[]
  workingAccessPermissions WorkingAccessPermission[]

  // Personal Repo
  personalGoals     PersonalGoal[]
  personalNotes     PersonalNote[]

  // Deep Repo
  deepInsights      DeepInsight[]
  trinityCore       TrinityCore?

  // Professional Relationships
  professionalContacts ProfessionalContact[]
  workRelationships   WorkRelationship[]
  projectRelationships ProjectRelationship[]
  educationRelationships EducationRelationship[]

  // Voice Coaching
  conversations     Conversation[]

  @@map("users")
}

// Professional Relationship Models
model ProfessionalContact {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  email                 String?
  linkedinUrl           String?  @map("linkedin_url")
  currentCompanyId      String?  @map("current_company_id") @db.Uuid
  currentTitle          String?  @map("current_title")
  phone                 String?
  notes                 String?
  relationshipStrength  Int?     @map("relationship_strength")
  lastInteractionDate   DateTime? @map("last_interaction_date")
  createdBy             String   @map("created_by") @db.Uuid
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  creator               User     @relation(fields: [createdBy], references: [id])
  currentCompany        Company? @relation(fields: [currentCompanyId], references: [id])
  workRelationships     WorkRelationship[]
  projectRelationships  ProjectRelationship[]
  educationRelationships EducationRelationship[]

  @@map("professional_contacts")
}

// Surface Repo Models (Public Profile)
model SurfaceProfile {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  username  String?  @unique
  publicBio String?  @map("public_bio")
  headline  String?
  location  String?
  website   String?
  isPublic  Boolean  @default(false) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("surface_profiles")
}

model WorkExperience {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  companyId      String    @map("company_id") @db.Uuid
  title          String
  employmentType String?   @map("employment_type")
  startDate      DateTime? @map("start_date")
  endDate        DateTime? @map("end_date")
  isCurrent      Boolean   @default(false) @map("is_current")
  description    String?
  achievements   String[]
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user            User @relation(fields: [userId], references: [id])
  company         Company @relation(fields: [companyId], references: [id])
  workRelationships WorkRelationship[]

  @@map("work_experiences")
}

model UserSkill {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String   @map("user_id") @db.Uuid
  skillId             String   @map("skill_id") @db.Uuid
  proficiencyLevel    String?  @map("proficiency_level")
  yearsOfExperience   Int?     @map("years_of_experience")
  isShowcase          Boolean  @default(false) @map("is_showcase")
  endorsementsCount   Int      @default(0) @map("endorsements_count")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user  User  @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
  @@map("user_skills")
}

model UserEducation {
  id            String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String                @map("user_id") @db.Uuid
  institutionId String                @map("institution_id") @db.Uuid
  degree        String?
  fieldOfStudy  String?               @map("field_of_study")
  startDate     DateTime?             @map("start_date")
  endDate       DateTime?             @map("end_date")
  gpa           String?
  description   String?
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user                    User                      @relation(fields: [userId], references: [id])
  institution             EducationalInstitution    @relation(fields: [institutionId], references: [id])
  educationRelationships  EducationRelationship[]

  @@map("user_education")
}

model UserCertification {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @map("user_id") @db.Uuid
  certificationId String        @map("certification_id") @db.Uuid
  issuedDate      DateTime?     @map("issued_date")
  expiryDate      DateTime?     @map("expiry_date")
  credentialId    String?       @map("credential_id")
  credentialUrl   String?       @map("credential_url")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user          User          @relation(fields: [userId], references: [id])
  certification Certification @relation(fields: [certificationId], references: [id])

  @@map("user_certifications")
}

// Working Repo Models (Selective Portfolio)
model WorkingProfile {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @unique @map("user_id") @db.Uuid
  title       String
  description String?
  bannerImage String?  @map("banner_image")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user                     User                       @relation(fields: [userId], references: [id])
  workingProjects          WorkingProject[]
  workingAchievements      WorkingAchievement[]
  workingMedia             WorkingMedia[]
  workingAccessPermissions WorkingAccessPermission[]
  workingAccessLogs        WorkingAccessLog[]

  @@map("working_profiles")
}

model WorkingProject {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  workingProfileId  String   @map("working_profile_id") @db.Uuid
  title             String
  companyId         String?  @map("company_id") @db.Uuid
  description       String?
  challenge         String?
  solution          String?
  impact            String?
  technologies      Json?
  startDate         DateTime? @map("start_date")
  endDate           DateTime? @map("end_date")
  projectType       String?  @map("project_type")
  displayOrder      Int?     @map("display_order")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user                  User                    @relation(fields: [userId], references: [id])
  workingProfile        WorkingProfile          @relation(fields: [workingProfileId], references: [id])
  company               Company?                @relation(fields: [companyId], references: [id])
  workingMedia          WorkingMedia[]
  projectRelationships  ProjectRelationship[]

  @@map("working_projects")
}

model WorkingAchievement {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @map("user_id") @db.Uuid
  workingProfileId   String   @map("working_profile_id") @db.Uuid
  title              String
  description        String?
  context            String?
  quantifiedImpact   Json?    @map("quantified_impact")
  skillsDemonstrated Json?    @map("skills_demonstrated")
  recognition        String?
  dateAchieved       DateTime? @map("date_achieved")
  displayOrder       Int?     @map("display_order")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user           User           @relation(fields: [userId], references: [id])
  workingProfile WorkingProfile @relation(fields: [workingProfileId], references: [id])
  workingMedia   WorkingMedia[]

  @@map("working_achievements")
}

model WorkingMedia {
  id               String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String              @map("user_id") @db.Uuid
  workingProfileId String              @map("working_profile_id") @db.Uuid
  projectId        String?             @map("project_id") @db.Uuid
  achievementId    String?             @map("achievement_id") @db.Uuid
  mediaType        String              @map("media_type")
  title            String?
  description      String?
  fileUrl          String?             @map("file_url")
  fileSize         Int?                @map("file_size")
  mimeType         String?             @map("mime_type")
  thumbnailUrl     String?             @map("thumbnail_url")
  displayOrder     Int?                @map("display_order")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user              User                @relation(fields: [userId], references: [id])
  workingProfile    WorkingProfile      @relation(fields: [workingProfileId], references: [id])
  project           WorkingProject?     @relation(fields: [projectId], references: [id])
  achievement       WorkingAchievement? @relation(fields: [achievementId], references: [id])

  @@map("working_media")
}

model WorkingAccessPermission {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workingProfileId String    @map("working_profile_id") @db.Uuid
  grantedToEmail   String?   @map("granted_to_email")
  grantedToName    String?   @map("granted_to_name")
  accessLevel      String?   @map("access_level")
  grantedBy        String    @map("granted_by") @db.Uuid
  grantedAt        DateTime  @default(now()) @map("granted_at")
  expiresAt        DateTime? @map("expires_at")
  isRevoked        Boolean   @default(false) @map("is_revoked")
  accessToken      String?   @unique @map("access_token")

  // Relationships
  workingProfile User           @relation(fields: [grantedBy], references: [id])
  profile        WorkingProfile @relation(fields: [workingProfileId], references: [id])

  @@map("working_access_permissions")
}

model WorkingAccessLog {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workingProfileId  String   @map("working_profile_id") @db.Uuid
  accessedByEmail   String?  @map("accessed_by_email")
  accessedByName    String?  @map("accessed_by_name")
  accessToken       String?  @map("access_token")
  accessedAt        DateTime @default(now()) @map("accessed_at")
  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")
  pagesViewed       Json?    @map("pages_viewed")

  // Relationships
  workingProfile WorkingProfile @relation(fields: [workingProfileId], references: [id])

  @@map("working_access_logs")
}

// Personal Repo Models (Private Development)
model PersonalGoal {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String   @map("user_id") @db.Uuid
  goalType            String?  @map("goal_type")
  title               String?
  description         String?
  targetDate          DateTime? @map("target_date")
  progressPercentage  Int?     @map("progress_percentage")
  okrs                Json?
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("personal_goals")
}

model PersonalNote {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  noteType  String?  @map("note_type")
  content   String?
  tags      Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("personal_notes")
}

// Deep Repo Models (System-managed)
model DeepInsight {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  insightType     String?  @map("insight_type")
  aiAnalysis      Json?    @map("ai_analysis")
  confidenceScore Float?   @map("confidence_score")
  generatedAt     DateTime @default(now()) @map("generated_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("deep_insights")
}

model TrinityCore {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String   @unique @map("user_id") @db.Uuid
  questAnalysis   Json?    @map("quest_analysis")
  serviceAnalysis Json?    @map("service_analysis")
  pledgeAnalysis  Json?    @map("pledge_analysis")
  coherenceScore  Float?   @map("coherence_score")
  lastUpdated     DateTime @default(now()) @map("last_updated")

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("trinity_core")
}

// Professional Relationship Models
model WorkRelationship {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                  String   @map("user_id") @db.Uuid
  workExperienceId        String   @map("work_experience_id") @db.Uuid
  contactId               String   @map("contact_id") @db.Uuid
  relationshipType        String?  @map("relationship_type")
  relationshipDescription String?  @map("relationship_description")
  collaborationContext    String?  @map("collaboration_context")
  startDate               DateTime? @map("start_date")
  endDate                 DateTime? @map("end_date")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user           User                 @relation(fields: [userId], references: [id])
  workExperience WorkExperience       @relation(fields: [workExperienceId], references: [id])
  contact        ProfessionalContact  @relation(fields: [contactId], references: [id])

  @@map("work_relationships")
}

model ProjectRelationship {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String   @map("user_id") @db.Uuid
  projectId            String   @map("project_id") @db.Uuid
  contactId            String   @map("contact_id") @db.Uuid
  relationshipType     String?  @map("relationship_type")
  roleDescription      String?  @map("role_description")
  collaborationDetails String?  @map("collaboration_details")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user    User                @relation(fields: [userId], references: [id])
  project WorkingProject      @relation(fields: [projectId], references: [id])
  contact ProfessionalContact @relation(fields: [contactId], references: [id])

  @@map("project_relationships")
}

model EducationRelationship {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String   @map("user_id") @db.Uuid
  educationId         String   @map("education_id") @db.Uuid
  contactId           String   @map("contact_id") @db.Uuid
  relationshipType    String?  @map("relationship_type")
  subjectArea         String?  @map("subject_area")
  interactionContext  String?  @map("interaction_context")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user      User                @relation(fields: [userId], references: [id])
  education UserEducation       @relation(fields: [educationId], references: [id])
  contact   ProfessionalContact @relation(fields: [contactId], references: [id])

  @@map("education_relationships")
}

// Voice Coaching Models (Enhanced)
model Conversation {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  sessionId   String    @unique @map("session_id")
  type        String?
  summary     String?
  emotions    Json?
  repoContext Json?     @map("repo_context")
  startedAt   DateTime  @default(now()) @map("started_at")
  endedAt     DateTime? @map("ended_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user     User      @relation(fields: [userId], references: [id])
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  role           String
  content        String
  emotions       Json?
  repoReferences Json?    @map("repo_references")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relationships
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
}